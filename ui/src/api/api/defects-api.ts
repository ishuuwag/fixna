/* tslint:disable */
/* eslint-disable */
/**
 * FixNa- OpenAPI 3.0
 * OpenAPI specification for FixNa
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gervasius@logicpp.com.na
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDefectResponse } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
import { Defect } from '../models/defect';
/**
 * DefectsApi - axios parameter creator
 * @export
 */
export const DefectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a defect
         * @param {Defect} defect 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefect: async (defect: Defect, image: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'defect' is not null or undefined
            assertParamExists('createDefect', 'defect', defect)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('createDefect', 'image', image)
            const localVarPath = `/defects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (defect !== undefined) { 
                localVarFormParams.append('defect', new Blob([JSON.stringify(defect)], { type: "application/json", }));
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefectsApi - functional programming interface
 * @export
 */
export const DefectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a defect
         * @param {Defect} defect 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDefect(defect: Defect, image: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDefectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDefect(defect, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefectsApi - factory interface
 * @export
 */
export const DefectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a defect
         * @param {Defect} defect 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefect(defect: Defect, image: File, options?: any): AxiosPromise<CreateDefectResponse> {
            return localVarFp.createDefect(defect, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefectsApi - object-oriented interface
 * @export
 * @class DefectsApi
 * @extends {BaseAPI}
 */
export class DefectsApi extends BaseAPI {
    /**
     * 
     * @summary Create a defect
     * @param {Defect} defect 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    public createDefect(defect: Defect, image: File, options?: AxiosRequestConfig) {
        return DefectsApiFp(this.configuration).createDefect(defect, image, options).then((request) => request(this.axios, this.basePath));
    }
}
